## what new? : using spark and tensorFlow (new technologies)##
###################################################################################################################################
##  Steps That i follow in this project:                                                                                         ##
##1 Loop all the training set<image> and Store the dected Face in SequenceFile: Succo : <nameofFolder=>nameofImage,Img => Face > ##
##2 Train the set of faces with diffrent Models : NN,.... based on Accurancy (for me, only )                                     ##
##3 Take my new Training network and Test the Test-img-set with calculating accurancy                                            ##
###################################################################################################################################

import graphlab as gl
from FaceDetector import FaceDetector as fd

# Get user supplied values
path = "/home/ilyas/Desktop/FaceRecognrtionDeepLearning/FaceRecogn/"
cascPath = path + "haarcascade_frontalface_default.xml"
facesFolder = path+"faces/"
imgsdir = "/home/ilyas/Dropbox/lfw"


def main():
    print "step 1 : Extract Faces from images and put in a dictionary <label:name_of_face, value:path_to_face>, the dict is optionally"
    #extact all faces from images <do it just for the first time> : Done
    #fd.faceExtractor(imgsdir,cascPath, facesFolder)

    #load_images return an SFram :  path |   image
    image_sarray = gl.image_analysis.load_images(facesFolder, "auto", with_path=True,recursive = True,ignore_failure=True)
    # TODO : add Class==name of_the_person_in_the_img to the SFrame:image_sarray and change target to Class
    mArrayClasses = getMyClass(image_sarray)

    dataset, test_data = image_sarray.random_split(0.75)
    training_data, validation_data = dataset.random_split(0.8)
    #make sure that all faces have the same size
    training_data['image'] = gl.image_analysis.resize(training_data['image'], 30, 30, 1, decode=True)
    validation_data['image'] = gl.image_analysis.resize(validation_data['image'], 30, 30, 1, decode=True)
    #create my NN
    net = gl.deeplearning.create(training_data, target='path')
    #Train NN
    m = gl.neuralnet_classifier.create(training_data, target='path',network = net, validation_set = validation_data,metric = ['accuracy', 'recall@2'], max_iterations = 3)
    #classify the test set and print predict
    pred = m.classify(test_data)
    print pred


def getMyClass(mSArray):
    myFacesClass = dict()
    #faceName = imgNameSpliting[len(imgNameSpliting) - 1]
    #imgNameClass = faceName.split('0')
    #imgClass = imgNameClass[0]
    #myFacesClass[pathimg] = imgClass
    return myFacesClass

if __name__ == '__main__':
      main()